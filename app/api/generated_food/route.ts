import { NextRequest } from "next/server";

import prisma from "@/lib/prisma";
import { handleRequest } from "@/utils/handlers.util";

export const GET = async (req: NextRequest) => {
	try {
		const searchParams = req.nextUrl.searchParams;
		const generatedFoodId = searchParams.get("generatedFoodId");

		let getType = "all";

		if (generatedFoodId) {
			getType = "concrete_post";
		}

		let searchResult = null;

		const includeQuery = {
			generatedBy: {
				select: {
					name: true,
					lastName: true,
					role: true,
				},
			},
		};

		switch (getType) {
			case "all":
				searchResult = await prisma.generatedFood.findMany({
					include: includeQuery,
				});

				break;
			case "concrete_post":
				searchResult = await prisma.generatedFood.findUnique({
					where: {
						id: generatedFoodId as string,
					},
					include: includeQuery,
				});

				break;
			default:
				return handleRequest(
					null,
					{
						title: "Bad request!",
						message: "Invalid getType",
					},
					400,
				);
		}

		return handleRequest(searchResult, null, 200);
	} catch (err) {
		console.error(err);

		return handleRequest(
			null,
			{
				title: "Server error!",
				message: "Something went wrong",
			},
			500,
		);
	}
};

export const POST = async (req: NextRequest) => {
	try {
		const { generatedById, description } = await req.json();

		if (!generatedById) {
			return handleRequest(
				null,
				{
					title: "Bad request!",
					message: "Provide generated By id",
				},
				400,
			);
		}

		const newGeneratedFood = await prisma.generatedFood.create({
			data: {
				description,
				generatedBy: {
					connect: {
						id: generatedById,
					},
				},
			},
		});

		return handleRequest(newGeneratedFood, null, 200);
	} catch (err) {
		return handleRequest(
			null,
			{
				title: "Server error",
				message: "Something went wrong",
			},
			500,
		);
	}
};
